name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Cancel outdated workflow runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0

jobs:
  # Job 1: Format check
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  # Job 2: Clippy linting
  clippy:
    name: Clippy Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "clippy"

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --locked -- -D warnings

  # Job 3: Build and Test (Matrix for multiple platforms)
  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libpcap-dev pkg-config

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Install libpcap (only if not already present)
          brew list libpcap &>/dev/null || brew install libpcap
          # pkg-config is provided by pkgconf which is pre-installed on GitHub Actions runners
          brew list pkgconf &>/dev/null || brew install pkgconf

      - name: Install Npcap SDK and Runtime DLLs (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Download and extract Npcap SDK (contains Packet.lib for development)
          Write-Host "Downloading Npcap SDK..."
          curl -L -o npcap-sdk.zip https://npcap.com/dist/npcap-sdk-1.13.zip
          Expand-Archive -Path npcap-sdk.zip -DestinationPath npcap-sdk
          Write-Host "✓ Npcap SDK extracted"

          # Create runtime directory
          New-Item -ItemType Directory -Force -Path "npcap-dlls"

          # Method 1: Try Npcap installer with strict timeout (known to hang in CI)
          Write-Host "`nAttempting Npcap 1.79 installation with 2-minute timeout..."
          $installerSuccess = $false

          try {
            # Download installer
            curl -L -o npcap-installer.exe https://npcap.com/dist/npcap-1.79.exe

            # Start installer with timeout protection
            $process = Start-Process -FilePath "$PWD\npcap-installer.exe" `
                                     -ArgumentList "/S", "/winpcap_mode" `
                                     -PassThru -NoNewWindow

            # Wait maximum 2 minutes (120 seconds)
            $completed = $process.WaitForExit(120000)

            if (-not $completed) {
              Write-Warning "Installer hung after 2 minutes - killing process"
              $process.Kill()
              Write-Warning "Npcap installer method failed (timeout)"
            }
            elseif ($process.ExitCode -eq 0) {
              Write-Host "Npcap installer completed with exit code 0"

              # Verify installation
              if ((Test-Path "C:\Windows\System32\wpcap.dll") -and (Test-Path "C:\Windows\System32\Packet.dll")) {
                Write-Host "✓ Npcap installed successfully via installer"
                Copy-Item "C:\Windows\System32\wpcap.dll" "npcap-dlls\" -Force
                Copy-Item "C:\Windows\System32\Packet.dll" "npcap-dlls\" -Force
                $installerSuccess = $true
              }
              else {
                Write-Warning "Installer succeeded but DLLs not found in System32"
              }
            }
            else {
              Write-Warning "Installer exited with code $($process.ExitCode)"
            }
          }
          catch {
            Write-Warning "Npcap installer method failed: $_"
          }

          # Method 2: Fallback to WinPcap via Chocolatey (reliable in CI, older but functional)
          if (-not $installerSuccess) {
            Write-Host "`nFalling back to WinPcap via Chocolatey..."

            try {
              # WinPcap package is more reliable in headless CI environments
              choco install winpcap -y --no-progress --timeout 120

              # Wait for installation to complete
              Start-Sleep -Seconds 10

              # Copy DLLs from System32
              if ((Test-Path "C:\Windows\System32\wpcap.dll") -and (Test-Path "C:\Windows\System32\Packet.dll")) {
                Write-Host "✓ WinPcap installed via Chocolatey"
                Copy-Item "C:\Windows\System32\wpcap.dll" "npcap-dlls\" -Force
                Copy-Item "C:\Windows\System32\Packet.dll" "npcap-dlls\" -Force
                $installerSuccess = $true
              }
              else {
                Write-Error "WinPcap Chocolatey install succeeded but DLLs not found"
                exit 1
              }
            }
            catch {
              Write-Error "WinPcap Chocolatey installation failed: $_"
              exit 1
            }
          }

          # Verify we obtained valid DLLs (real DLLs are >100KB, stubs are tiny)
          $wpcap = Get-Item "npcap-dlls\wpcap.dll" -ErrorAction Stop
          $packet = Get-Item "npcap-dlls\Packet.dll" -ErrorAction Stop

          Write-Host "`nDLL verification:"
          Write-Host "  wpcap.dll: $($wpcap.Length) bytes"
          Write-Host "  Packet.dll: $($packet.Length) bytes"

          if ($wpcap.Length -lt 100KB) {
            Write-Error "wpcap.dll too small ($($wpcap.Length) bytes) - possibly stub file"
            exit 1
          }
          if ($packet.Length -lt 100KB) {
            Write-Error "Packet.dll too small ($($packet.Length) bytes) - possibly stub file"
            exit 1
          }

          Write-Host "✓ Valid runtime DLLs obtained"

          # Add SDK lib directory to LIB environment variable for linking
          echo "LIB=$PWD\npcap-sdk\Lib\x64;$env:LIB" >> $env:GITHUB_ENV

          # Add DLL directory to PATH for runtime
          echo "PATH=$PWD\npcap-dlls;$env:PATH" >> $env:GITHUB_ENV

          # List what we got
          Write-Host "`nRuntime DLLs:"
          Get-ChildItem "npcap-dlls" | Format-Table Name, Length -AutoSize

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "test-${{ matrix.os }}"

      - name: Build
        run: cargo build --workspace --locked --verbose

      - name: Copy Npcap DLLs to binary directory (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Verify source DLLs exist
          Write-Host "=== Verifying Npcap DLLs in source directory ==="
          if (-not (Test-Path "npcap-dlls\wpcap.dll")) {
            Write-Error "Source wpcap.dll not found in npcap-dlls directory"
            exit 1
          }
          if (-not (Test-Path "npcap-dlls\Packet.dll")) {
            Write-Error "Source Packet.dll not found in npcap-dlls directory"
            exit 1
          }

          Write-Host "Source DLLs found:"
          Get-ChildItem "npcap-dlls\*.dll" | Format-Table Name, Length -AutoSize

          # Copy DLLs to target/debug (where prtip.exe resides)
          Write-Host "`n=== Copying DLLs to target/debug ==="
          Copy-Item "npcap-dlls\wpcap.dll" -Destination "target\debug\" -Force
          Copy-Item "npcap-dlls\Packet.dll" -Destination "target\debug\" -Force

          # Verify destination DLLs
          Write-Host "`nVerifying DLLs in target/debug:"
          if (-not (Test-Path "target\debug\wpcap.dll")) {
            Write-Error "Failed to copy wpcap.dll to target\debug"
            exit 1
          }
          if (-not (Test-Path "target\debug\Packet.dll")) {
            Write-Error "Failed to copy Packet.dll to target\debug"
            exit 1
          }

          Get-ChildItem "target\debug\*.dll" | Where-Object { $_.Name -match "pcap|Packet" } | Format-Table Name, Length -AutoSize
          Write-Host "✓ Npcap DLLs successfully copied to target\debug"

      - name: Run tests
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            # Windows: Skip prtip-network tests due to Npcap DLL runtime dependencies
            # The tests require actual network privileges and adapters not available in CI
            # PATH already includes npcap-dlls directory from Install Npcap step
            cargo test --workspace --locked --exclude prtip-network
          else
            cargo test --workspace --locked
          fi
        shell: bash

      - name: Build release
        run: cargo build --release --workspace --locked

  # Job 4: Security audit
  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run cargo-deny
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
          log-level: warn
          command: check advisories
          arguments: --all-features

  # Job 5: MSRV (Minimum Supported Rust Version) check
  msrv:
    name: MSRV Check (1.85)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust 1.85
        uses: dtolnay/rust-toolchain@1.85

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libpcap-dev pkg-config

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "msrv"

      - name: Check build with MSRV
        run: cargo build --workspace --locked --verbose
