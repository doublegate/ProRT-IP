name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Cancel outdated workflow runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0

jobs:
  # Job 1: Format check
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  # Job 2: Clippy linting
  clippy:
    name: Clippy Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "clippy"

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --locked -- -D warnings

  # Job 3: Build and Test (Matrix for multiple platforms)
  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libpcap-dev pkg-config

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Install libpcap (only if not already present)
          brew list libpcap &>/dev/null || brew install libpcap
          # pkg-config is provided by pkgconf which is pre-installed on GitHub Actions runners
          brew list pkgconf &>/dev/null || brew install pkgconf

      - name: Install Npcap SDK and Extract Runtime DLLs (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Download and extract Npcap SDK (contains Packet.lib for development)
          Write-Host "Downloading Npcap SDK..."
          curl -L -o npcap-sdk.zip https://npcap.com/dist/npcap-sdk-1.13.zip
          Expand-Archive -Path npcap-sdk.zip -DestinationPath npcap-sdk
          Write-Host "✓ Npcap SDK extracted"

          # Create runtime directory
          New-Item -ItemType Directory -Force -Path "npcap-dlls"

          # Extract WinPcap DLLs directly from installer (no execution required)
          # This avoids GUI hangs in GitHub Actions headless environment
          Write-Host "`nDownloading WinPcap installer for DLL extraction..."

          $extractionSuccess = $false

          # Method 1: Extract from WinPcap NSIS installer using 7-Zip
          try {
            # Download WinPcap installer (NSIS format, ~900KB)
            curl -L -o WinPcap_Installer.exe https://www.winpcap.org/install/bin/WinPcap_4_1_3.exe

            Write-Host "Extracting DLLs from NSIS installer (no execution)..."

            # 7-Zip is pre-installed on GitHub Actions Windows runners
            # Extract NSIS installer contents
            & 7z x WinPcap_Installer.exe -o"winpcap-extracted" -y | Out-Null

            # NSIS installers typically store files in predictable locations
            # Search recursively for the DLLs (x64 versions preferred)
            Write-Host "Searching for DLLs in extracted files..."

            # Find x64 DLLs first (preferred for 64-bit builds)
            $wpcapSrc = Get-ChildItem -Path "winpcap-extracted" -Recurse -Filter "wpcap.dll" -ErrorAction SilentlyContinue |
                        Where-Object { $_.DirectoryName -like "*x64*" -or $_.DirectoryName -like "*amd64*" } |
                        Select-Object -First 1

            $packetSrc = Get-ChildItem -Path "winpcap-extracted" -Recurse -Filter "Packet.dll" -ErrorAction SilentlyContinue |
                         Where-Object { $_.DirectoryName -like "*x64*" -or $_.DirectoryName -like "*amd64*" } |
                         Select-Object -First 1

            # Fallback to any DLL if x64 not found
            if (-not $wpcapSrc) {
              $wpcapSrc = Get-ChildItem -Path "winpcap-extracted" -Recurse -Filter "wpcap.dll" -ErrorAction SilentlyContinue |
                          Select-Object -First 1
            }

            if (-not $packetSrc) {
              $packetSrc = Get-ChildItem -Path "winpcap-extracted" -Recurse -Filter "Packet.dll" -ErrorAction SilentlyContinue |
                           Select-Object -First 1
            }

            if ($wpcapSrc -and $packetSrc) {
              Write-Host "Found DLLs in extraction:"
              Write-Host "  wpcap.dll: $($wpcapSrc.FullName) ($($wpcapSrc.Length) bytes)"
              Write-Host "  Packet.dll: $($packetSrc.FullName) ($($packetSrc.Length) bytes)"

              # Verify size before copying (valid DLLs are >100KB)
              if ($wpcapSrc.Length -gt 100KB -and $packetSrc.Length -gt 100KB) {
                Copy-Item $wpcapSrc.FullName "npcap-dlls\wpcap.dll" -Force
                Copy-Item $packetSrc.FullName "npcap-dlls\Packet.dll" -Force

                Write-Host "✓ DLLs extracted successfully via 7-Zip (no installer execution)"
                $extractionSuccess = $true
              }
              else {
                Write-Warning "Extracted DLLs too small - may be stubs or invalid"
              }
            }
            else {
              Write-Warning "DLLs not found in NSIS extraction"
            }
          }
          catch {
            Write-Warning "7-Zip NSIS extraction failed: $_"
          }

          # Method 2: Fallback to Chocolatey WinPcap (uses AutoHotkey, may hang but more reliable)
          if (-not $extractionSuccess) {
            Write-Host "`nFallback: Installing WinPcap via Chocolatey with timeout..."

            try {
              # Use job control to enforce timeout (Chocolatey can hang on headless systems)
              $job = Start-Job -ScriptBlock {
                choco install winpcap -y --no-progress 2>&1
              }

              # Wait maximum 2 minutes
              $completed = Wait-Job -Job $job -Timeout 120

              if ($completed) {
                $output = Receive-Job -Job $job
                Write-Host "Chocolatey output: $output"

                # Wait for file system sync
                Start-Sleep -Seconds 5

                # Check if DLLs were installed to System32
                if ((Test-Path "C:\Windows\System32\wpcap.dll") -and (Test-Path "C:\Windows\System32\Packet.dll")) {
                  Write-Host "✓ WinPcap installed via Chocolatey"
                  Copy-Item "C:\Windows\System32\wpcap.dll" "npcap-dlls\" -Force
                  Copy-Item "C:\Windows\System32\Packet.dll" "npcap-dlls\" -Force
                  $extractionSuccess = $true
                }
                else {
                  Write-Warning "Chocolatey completed but DLLs not found in System32"
                }
              }
              else {
                Write-Warning "Chocolatey installation timed out after 2 minutes"
                Stop-Job -Job $job
              }

              Remove-Job -Job $job -Force
            }
            catch {
              Write-Warning "Chocolatey installation failed: $_"
            }
          }

          # Verify we obtained valid DLLs
          if (-not $extractionSuccess) {
            Write-Error "All DLL extraction methods failed - cannot proceed"
            Write-Host "`nTroubleshooting:"
            Write-Host "  1. Check if WinPcap download URL is accessible"
            Write-Host "  2. Verify 7-Zip is available: $(Get-Command 7z -ErrorAction SilentlyContinue)"
            Write-Host "  3. Check Chocolatey status: $(choco --version 2>&1)"
            exit 1
          }

          # Final validation
          $wpcap = Get-Item "npcap-dlls\wpcap.dll" -ErrorAction Stop
          $packet = Get-Item "npcap-dlls\Packet.dll" -ErrorAction Stop

          Write-Host "`nDLL verification:"
          Write-Host "  wpcap.dll: $($wpcap.Length) bytes"
          Write-Host "  Packet.dll: $($packet.Length) bytes"

          if ($wpcap.Length -lt 100KB) {
            Write-Error "wpcap.dll too small ($($wpcap.Length) bytes) - invalid"
            exit 1
          }
          if ($packet.Length -lt 100KB) {
            Write-Error "Packet.dll too small ($($packet.Length) bytes) - invalid"
            exit 1
          }

          Write-Host "✓ Valid runtime DLLs obtained (extraction method, no GUI installers)"

          # Add SDK lib directory to LIB environment variable for linking
          echo "LIB=$PWD\npcap-sdk\Lib\x64;$env:LIB" >> $env:GITHUB_ENV

          # Add DLL directory to PATH for runtime
          echo "PATH=$PWD\npcap-dlls;$env:PATH" >> $env:GITHUB_ENV

          # Show final results
          Write-Host "`nFinal DLLs:"
          Get-ChildItem "npcap-dlls" | Format-Table Name, Length -AutoSize

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "test-${{ matrix.os }}"

      - name: Build
        run: cargo build --workspace --locked --verbose

      - name: Copy Npcap DLLs to binary directory (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Verify source DLLs exist
          Write-Host "=== Verifying Npcap DLLs in source directory ==="
          if (-not (Test-Path "npcap-dlls\wpcap.dll")) {
            Write-Error "Source wpcap.dll not found in npcap-dlls directory"
            exit 1
          }
          if (-not (Test-Path "npcap-dlls\Packet.dll")) {
            Write-Error "Source Packet.dll not found in npcap-dlls directory"
            exit 1
          }

          Write-Host "Source DLLs found:"
          Get-ChildItem "npcap-dlls\*.dll" | Format-Table Name, Length -AutoSize

          # Copy DLLs to target/debug (where prtip.exe resides)
          Write-Host "`n=== Copying DLLs to target/debug ==="
          Copy-Item "npcap-dlls\wpcap.dll" -Destination "target\debug\" -Force
          Copy-Item "npcap-dlls\Packet.dll" -Destination "target\debug\" -Force

          # Verify destination DLLs
          Write-Host "`nVerifying DLLs in target/debug:"
          if (-not (Test-Path "target\debug\wpcap.dll")) {
            Write-Error "Failed to copy wpcap.dll to target\debug"
            exit 1
          }
          if (-not (Test-Path "target\debug\Packet.dll")) {
            Write-Error "Failed to copy Packet.dll to target\debug"
            exit 1
          }

          Get-ChildItem "target\debug\*.dll" | Where-Object { $_.Name -match "pcap|Packet" } | Format-Table Name, Length -AutoSize
          Write-Host "✓ Npcap DLLs successfully copied to target\debug"

      - name: Run tests
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            # Windows: Skip prtip-network tests due to Npcap DLL runtime dependencies
            # The tests require actual network privileges and adapters not available in CI
            # PATH already includes npcap-dlls directory from Install Npcap step
            cargo test --workspace --locked --exclude prtip-network
          else
            cargo test --workspace --locked
          fi
        shell: bash

      - name: Build release
        run: cargo build --release --workspace --locked

  # Job 4: Security audit
  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run cargo-deny
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
          log-level: warn
          command: check advisories
          arguments: --all-features

  # Job 5: MSRV (Minimum Supported Rust Version) check
  msrv:
    name: MSRV Check (1.85)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust 1.85
        uses: dtolnay/rust-toolchain@1.85

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libpcap-dev pkg-config

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "msrv"

      - name: Check build with MSRV
        run: cargo build --workspace --locked --verbose
