    Checking cfg-if v1.0.3
    Checking memchr v2.7.6
    Checking smallvec v1.15.1
    Checking once_cell v1.21.3
    Checking scopeguard v1.2.0
    Checking pin-project-lite v0.2.16
    Checking stable_deref_trait v1.2.0
    Checking libc v0.2.176
    Checking serde_core v1.0.228
    Checking equivalent v1.0.2
    Checking regex-syntax v0.8.6
    Checking hashbrown v0.16.0
    Checking num-traits v0.2.19
    Checking log v0.4.28
    Checking ryu v1.0.20
    Checking crossbeam-utils v0.8.21
    Checking futures-core v0.3.31
    Checking zerofrom v0.1.6
    Checking itoa v1.0.15
   Compiling typenum v1.19.0
    Checking writeable v0.6.1
    Checking litemap v0.8.0
    Checking bytes v1.10.1
    Checking lock_api v0.4.14
    Checking iana-time-zone v0.1.64
    Checking tracing-core v0.1.34
   Compiling icu_normalizer_data v2.0.0
    Checking yoke v0.8.0
   Compiling icu_properties_data v2.0.1
    Checking no-std-net v0.6.0
    Checking futures-sink v0.3.31
    Checking bitflags v2.9.4
   Compiling icu_normalizer v2.0.0
    Checking portable-atomic v1.11.1
    Checking pnet_base v0.35.0
    Checking winnow v0.7.13
   Compiling icu_properties v2.0.1
    Checking toml_write v0.1.2
    Checking unicode-width v0.2.2
    Checking futures-channel v0.3.31
    Checking zerovec v0.11.4
    Checking zerotrie v0.2.2
    Checking zerocopy v0.8.27
   Compiling parking_lot_core v0.9.12
    Checking aho-corasick v1.1.3
    Checking indexmap v2.11.4
    Checking tracing v0.1.41
    Checking slab v0.4.11
    Checking number_prefix v0.4.0
    Checking futures-io v0.3.31
    Checking futures-task v0.3.31
    Checking pin-utils v0.1.0
   Compiling parking_lot v0.12.5
    Checking thiserror v1.0.69
    Checking anyhow v1.0.100
    Checking pnet_macros_support v0.35.0
    Checking percent-encoding v2.3.2
   Compiling generic-array v0.14.7
    Checking futures-util v0.3.31
    Checking pnet_packet v0.35.0
   Compiling thiserror v2.0.17
    Checking utf8_iter v1.0.4
    Checking foldhash v0.1.5
    Checking form_urlencoded v1.2.2
    Checking allocator-api2 v0.2.21
   Compiling futures-intrusive v0.5.0
   Compiling libsqlite3-sys v0.30.1
    Checking concurrent-queue v2.5.0
    Checking crossbeam-queue v0.3.12
    Checking parking v2.2.1
    Checking arrayvec v0.7.6
    Checking tinystr v0.8.1
    Checking potential_utf v0.1.3
    Checking hashbrown v0.15.5
    Checking cpufeatures v0.2.17
    Checking crc-catalog v2.4.0
   Compiling idna_adapter v1.2.1
   Compiling chrono v0.4.42
    Checking icu_collections v2.0.0
   Compiling atoi v2.0.0
    Checking crc v3.3.0
    Checking etherparse v0.15.0
    Checking icu_locale_core v2.0.0
   Compiling idna v1.1.0
    Checking event-listener v5.4.1
   Compiling block-buffer v0.10.4
   Compiling crypto-common v0.1.6
   Compiling digest v0.10.7
    Checking spin v0.9.8
    Checking base64 v0.22.1
   Compiling sha2 v0.10.9
    Checking crossbeam-epoch v0.9.18
    Checking raw-cpuid v11.6.0
    Checking flume v0.11.1
    Checking mio v1.0.4
    Checking signal-hook-registry v1.4.6
    Checking socket2 v0.6.0
    Checking console v0.15.11
    Checking getrandom v0.2.16
    Checking pnet_sys v0.35.0
    Checking rlimit v0.10.2
    Checking rand_core v0.6.4
    Checking hashlink v0.10.0
    Checking icu_provider v2.0.0
    Checking nix v0.27.1
    Checking socket2 v0.5.10
    Checking anstyle v1.0.13
    Checking hashbrown v0.14.5
    Checking ppv-lite86 v0.2.21
    Checking crossbeam-deque v0.8.6
    Checking indicatif v0.17.11
    Checking tokio v1.47.1
    Checking regex-automata v0.4.11
    Checking serde v1.0.228
    Checking serde_json v1.0.145
    Checking crossbeam-channel v0.5.15
    Checking spinning_top v0.3.0
    Checking utf8parse v0.2.2
    Checking no-std-compat v0.4.1
    Checking nonzero_ext v0.3.0
    Checking rand_chacha v0.3.1
    Checking futures-timer v3.0.3
    Checking anstyle-parse v0.2.7
    Checking dashmap v5.5.3
    Checking lazy_static v1.5.0
    Checking anstyle-query v1.1.4
    Checking colorchoice v1.0.4
    Checking is_terminal_polyfill v1.70.1
   Compiling getrandom v0.3.3
   Compiling rustix v1.1.2
    Checking clap_lex v0.7.5
    Checking rand v0.8.5
    Checking strsim v0.11.1
    Checking linux-raw-sys v0.11.0
    Checking anstream v0.6.21
    Checking ipnetwork v0.20.0
    Checking serde_spanned v0.6.9
    Checking toml_datetime v0.6.11
    Checking either v1.15.0
    Checking serde_urlencoded v0.7.1
    Checking crossbeam v0.8.4
    Checking clap_builder v4.5.48
    Checking pnet_datalink v0.35.0
    Checking toml_edit v0.22.27
    Checking sharded-slab v0.1.7
    Checking tracing-log v0.2.0
    Checking thread_local v1.1.9
   Compiling url v2.5.7
    Checking nu-ansi-term v0.50.1
    Checking predicates-core v1.0.9
    Checking fastrand v2.3.0
   Compiling doc-comment v0.3.3
    Checking quick-xml v0.31.0
    Checking colored v2.2.0
    Checking num_cpus v1.17.0
    Checking float-cmp v0.10.0
    Checking difflib v0.4.0
    Checking normalize-line-endings v0.3.0
    Checking termtree v0.5.1
    Checking quanta v0.12.6
   Compiling assert_cmd v2.0.17
    Checking wait-timeout v0.2.1
    Checking futures-executor v0.3.31
    Checking pnet_transport v0.35.0
    Checking predicates-tree v1.0.12
    Checking futures v0.3.31
    Checking pnet v0.35.0
    Checking governor v0.6.3
   Compiling sqlx-core v0.8.6
    Checking clap v4.5.48
    Checking toml v0.8.23
    Checking regex v1.11.3
    Checking matchers v0.2.0
    Checking bstr v1.12.0
    Checking tracing-subscriber v0.3.20
    Checking tempfile v3.23.0
    Checking prtip-core v0.1.0 (/home/parobek/Code/ProRT-IP/crates/prtip-core)
    Checking predicates v3.1.3
warning: you should consider adding a `Default` implementation for `OsFingerprintDb`
   --> crates/prtip-core/src/os_db.rs:123:5
    |
123 | /     pub fn new() -> Self {
124 | |         Self {
125 | |             fingerprints: Vec::new(),
126 | |             match_points: MatchPoints::default(),
127 | |         }
128 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
    = note: `#[warn(clippy::new_without_default)]` on by default
help: try adding this
    |
121 + impl Default for OsFingerprintDb {
122 +     fn default() -> Self {
123 +         Self::new()
124 +     }
125 + }
    |

warning: method `from_str` can be confused for the standard trait method `std::str::FromStr::from_str`
   --> crates/prtip-core/src/os_db.rs:131:5
    |
131 | /     pub fn from_str(content: &str) -> Result<Self, Error> {
132 | |         let mut db = Self::new();
133 | |         let mut current_fingerprint: Option<OsFingerprint> = None;
...   |
225 | |         Ok(db)
226 | |     }
    | |_____^
    |
    = help: consider implementing the trait `std::str::FromStr` or choosing a less ambiguous method name
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait
    = note: `#[warn(clippy::should_implement_trait)]` on by default

warning: this `impl` can be derived
   --> crates/prtip-core/src/os_db.rs:343:1
    |
343 | / impl Default for OsClass {
344 | |     fn default() -> Self {
345 | |         Self {
346 | |             vendor: String::new(),
...   |
352 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls
    = note: `#[warn(clippy::derivable_impls)]` on by default
help: replace the manual implementation with a derive attribute
    |
 49 + #[derive(Default)]
 50 ~ pub struct OsClass {
    |

warning: method `from_str` can be confused for the standard trait method `std::str::FromStr::from_str`
   --> crates/prtip-core/src/service_db.rs:105:5
    |
105 | /     pub fn from_str(content: &str) -> Result<Self, Error> {
106 | |         let mut db = Self::new();
107 | |         let mut current_probe: Option<ServiceProbe> = None;
...   |
201 | |         Ok(db)
202 | |     }
    | |_____^
    |
    = help: consider implementing the trait `std::str::FromStr` or choosing a less ambiguous method name
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait

warning: use of `or_insert_with` to construct default value
   --> crates/prtip-core/src/service_db.rs:212:18
    |
212 |                 .or_insert_with(Vec::new)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `or_default()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_default
    = note: `#[warn(clippy::unwrap_or_default)]` on by default

warning: `prtip-core` (lib) generated 5 warnings (run `cargo clippy --fix --lib -p prtip-core` to apply 3 suggestions)
    Checking tokio-stream v0.1.17
    Checking prtip-network v0.1.0 (/home/parobek/Code/ProRT-IP/crates/prtip-network)
   Compiling sqlx-sqlite v0.8.6
warning: `prtip-core` (lib test) generated 5 warnings (5 duplicates)
   Compiling sqlx-macros-core v0.8.6
   Compiling sqlx-macros v0.8.6
    Checking sqlx v0.8.6
    Checking prtip-scanner v0.1.0 (/home/parobek/Code/ProRT-IP/crates/prtip-scanner)
warning: unused import: `OsFingerprint`
  --> crates/prtip-scanner/src/os_fingerprinter.rs:29:25
   |
29 | use prtip_core::{Error, OsFingerprint, OsFingerprintDb};
   |                         ^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `IpAddr`
  --> crates/prtip-scanner/src/os_probe.rs:31:16
   |
31 | use std::net::{IpAddr, Ipv4Addr};
   |                ^^^^^^

warning: unused import: `SystemTime`
  --> crates/prtip-scanner/src/os_probe.rs:32:36
   |
32 | use std::time::{Duration, Instant, SystemTime};
   |                                    ^^^^^^^^^^

warning: unused variable: `target`
  --> crates/prtip-scanner/src/banner_grabber.rs:92:43
   |
92 |     pub async fn grab_https_banner(&self, target: SocketAddr) -> Result<String, Error> {
   |                                           ^^^^^^ help: if this is intentional, prefix it with an underscore: `_target`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `probe`
   --> crates/prtip-scanner/src/os_probe.rs:103:17
    |
103 |             let probe = self.build_seq_probe(i)?;
    |                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_probe`

warning: unused variable: `ie1_probe`
   --> crates/prtip-scanner/src/os_probe.rs:122:13
    |
122 |         let ie1_probe = self.build_icmp_echo_probe(0, 0)?;
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_ie1_probe`

warning: unused variable: `ie2_probe`
   --> crates/prtip-scanner/src/os_probe.rs:123:13
    |
123 |         let ie2_probe = self.build_icmp_echo_probe(4, 9)?;
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_ie2_probe`

warning: unused variable: `ecn_probe`
   --> crates/prtip-scanner/src/os_probe.rs:129:13
    |
129 |         let ecn_probe = self.build_ecn_probe()?;
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_ecn_probe`

warning: unused variable: `t2_probe`
   --> crates/prtip-scanner/src/os_probe.rs:135:13
    |
135 |         let t2_probe = self.build_t2_probe()?; // NULL flags to open port
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_t2_probe`

warning: unused variable: `t3_probe`
   --> crates/prtip-scanner/src/os_probe.rs:136:13
    |
136 |         let t3_probe = self.build_t3_probe()?; // SYN+FIN+URG+PSH to open port
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_t3_probe`

warning: unused variable: `t4_probe`
   --> crates/prtip-scanner/src/os_probe.rs:137:13
    |
137 |         let t4_probe = self.build_t4_probe()?; // ACK to open port
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_t4_probe`

warning: unused variable: `t5_probe`
   --> crates/prtip-scanner/src/os_probe.rs:138:13
    |
138 |         let t5_probe = self.build_t5_probe()?; // SYN to closed port
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_t5_probe`

warning: unused variable: `t6_probe`
   --> crates/prtip-scanner/src/os_probe.rs:139:13
    |
139 |         let t6_probe = self.build_t6_probe()?; // ACK to closed port
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_t6_probe`

warning: unused variable: `t7_probe`
   --> crates/prtip-scanner/src/os_probe.rs:140:13
    |
140 |         let t7_probe = self.build_t7_probe()?; // FIN+PSH+URG to closed port
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_t7_probe`

warning: unused variable: `u1_probe`
   --> crates/prtip-scanner/src/os_probe.rs:151:13
    |
151 |         let u1_probe = self.build_u1_probe()?;
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_u1_probe`

warning: `prtip-scanner` (lib) generated 15 warnings (run `cargo clippy --fix --lib -p prtip-scanner` to apply 3 suggestions)
    Checking prtip-cli v0.1.0 (/home/parobek/Code/ProRT-IP/crates/prtip-cli)
warning: `prtip-scanner` (lib test) generated 15 warnings (15 duplicates)
warning: method `print_compact` is never used
  --> crates/prtip-cli/src/banner.rs:99:12
   |
15 | impl Banner {
   | ----------- method in this implementation
...
99 |     pub fn print_compact(&self) {
   |            ^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `prtip-cli` (bin "prtip") generated 1 warning
warning: `prtip-cli` (bin "prtip" test) generated 1 warning (1 duplicate)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 17.28s
