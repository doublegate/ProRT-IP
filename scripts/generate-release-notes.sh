#!/usr/bin/env bash
# generate-release-notes.sh - Auto-generate release notes from commits
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

usage() {
    cat <<EOF
Generate Release Notes

Usage: $(basename "$0") [FROM_TAG]

Arguments:
  FROM_TAG    Previous version tag (default: latest tag)

Examples:
  ./generate-release-notes.sh v0.3.5
  ./generate-release-notes.sh  # Uses latest tag
EOF
    exit 0
}

if [[ "${1:-}" == "--help" ]]; then
    usage
fi

cd "$PROJECT_ROOT"

FROM_TAG="${1:-$(git describe --tags --abbrev=0 2>/dev/null || echo "")}"
TO_REF="HEAD"

if [[ -z "$FROM_TAG" ]]; then
    echo "No previous tag found"
    exit 1
fi

CURRENT_VERSION=$(grep -m1 '^version = ' Cargo.toml | sed 's/.*"\(.*\)".*/\1/')

echo -e "${BLUE}Generating release notes: $FROM_TAG → v$CURRENT_VERSION${NC}"
echo ""

echo "# Release v$CURRENT_VERSION"
echo ""
echo "**Date:** $(date +%Y-%m-%d)"
echo ""
echo "## Changes Since $FROM_TAG"
echo ""
echo "### Features"
git log --oneline "$FROM_TAG..$TO_REF" --grep="^feat" | sed 's/^/- /' || echo "- No new features"
echo ""
echo "### Bug Fixes"
git log --oneline "$FROM_TAG..$TO_REF" --grep="^fix" | sed 's/^/- /' || echo "- No bug fixes"
echo ""
echo "### Performance"
git log --oneline "$FROM_TAG..$TO_REF" --grep="^perf" | sed 's/^/- /' || echo "- No performance changes"
echo ""
echo "### Documentation"
git log --oneline "$FROM_TAG..$TO_REF" --grep="^docs" | sed 's/^/- /' || echo "- No documentation changes"
echo ""
echo "## Statistics"
echo ""
echo "- **Commits:** $(git rev-list --count "$FROM_TAG..$TO_REF")"
echo "- **Files Changed:** $(git diff --shortstat "$FROM_TAG..$TO_REF" | awk '{print $1}' || echo "0")"
echo "- **Contributors:** $(git shortlog -sn "$FROM_TAG..$TO_REF" | wc -l)"
echo ""
echo "## Download"
echo ""
echo "See [Releases](https://github.com/doublegate/ProRT-IP/releases) for binaries."
echo ""
echo "---"
echo ""
echo "Generated by generate-release-notes.sh"

echo ""
echo -e "${GREEN}✓ Release notes generated${NC}"
echo "Copy to GitHub release or CHANGELOG.md"
